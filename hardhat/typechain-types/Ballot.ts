/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface BallotInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addCandidate"
      | "addVoter"
      | "castVote"
      | "description"
      | "endBallot"
      | "getCandidateVoteCount"
      | "hasEnded"
      | "hasStarted"
      | "hasVoterVoted"
      | "owner"
      | "startBallot"
      | "title"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "BallotEnded"
      | "BallotStarted"
      | "CandidateRegistered"
      | "VoteCast"
      | "VoterRegistered"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addCandidate",
    values: [string, string]
  ): string;
  encodeFunctionData(functionFragment: "addVoter", values: [string]): string;
  encodeFunctionData(
    functionFragment: "castVote",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "description",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "endBallot", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getCandidateVoteCount",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "hasEnded", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "hasStarted",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "hasVoterVoted",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "startBallot",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "title", values?: undefined): string;

  decodeFunctionResult(
    functionFragment: "addCandidate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addVoter", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "castVote", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "description",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "endBallot", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getCandidateVoteCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "hasEnded", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasStarted", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "hasVoterVoted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "startBallot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "title", data: BytesLike): Result;
}

export namespace BallotEndedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace BallotStartedEvent {
  export type InputTuple = [];
  export type OutputTuple = [];
  export interface OutputObject {}
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace CandidateRegisteredEvent {
  export type InputTuple = [dpi: string, name: string];
  export type OutputTuple = [dpi: string, name: string];
  export interface OutputObject {
    dpi: string;
    name: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoteCastEvent {
  export type InputTuple = [candidateDpi: string];
  export type OutputTuple = [candidateDpi: string];
  export interface OutputObject {
    candidateDpi: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace VoterRegisteredEvent {
  export type InputTuple = [dpi: string];
  export type OutputTuple = [dpi: string];
  export interface OutputObject {
    dpi: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Ballot extends BaseContract {
  connect(runner?: ContractRunner | null): Ballot;
  waitForDeployment(): Promise<this>;

  interface: BallotInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addCandidate: TypedContractMethod<
    [_name: string, _dpi: string],
    [void],
    "nonpayable"
  >;

  addVoter: TypedContractMethod<[_dpi: string], [void], "nonpayable">;

  castVote: TypedContractMethod<
    [_candidateDpi: string, _voterDpi: string],
    [void],
    "nonpayable"
  >;

  description: TypedContractMethod<[], [string], "view">;

  endBallot: TypedContractMethod<[], [void], "nonpayable">;

  getCandidateVoteCount: TypedContractMethod<[_dpi: string], [bigint], "view">;

  hasEnded: TypedContractMethod<[], [boolean], "view">;

  hasStarted: TypedContractMethod<[], [boolean], "view">;

  hasVoterVoted: TypedContractMethod<[_dpi: string], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  startBallot: TypedContractMethod<[], [void], "nonpayable">;

  title: TypedContractMethod<[], [string], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addCandidate"
  ): TypedContractMethod<[_name: string, _dpi: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "addVoter"
  ): TypedContractMethod<[_dpi: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "castVote"
  ): TypedContractMethod<
    [_candidateDpi: string, _voterDpi: string],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "description"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "endBallot"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCandidateVoteCount"
  ): TypedContractMethod<[_dpi: string], [bigint], "view">;
  getFunction(
    nameOrSignature: "hasEnded"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasStarted"
  ): TypedContractMethod<[], [boolean], "view">;
  getFunction(
    nameOrSignature: "hasVoterVoted"
  ): TypedContractMethod<[_dpi: string], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "startBallot"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "title"
  ): TypedContractMethod<[], [string], "view">;

  getEvent(
    key: "BallotEnded"
  ): TypedContractEvent<
    BallotEndedEvent.InputTuple,
    BallotEndedEvent.OutputTuple,
    BallotEndedEvent.OutputObject
  >;
  getEvent(
    key: "BallotStarted"
  ): TypedContractEvent<
    BallotStartedEvent.InputTuple,
    BallotStartedEvent.OutputTuple,
    BallotStartedEvent.OutputObject
  >;
  getEvent(
    key: "CandidateRegistered"
  ): TypedContractEvent<
    CandidateRegisteredEvent.InputTuple,
    CandidateRegisteredEvent.OutputTuple,
    CandidateRegisteredEvent.OutputObject
  >;
  getEvent(
    key: "VoteCast"
  ): TypedContractEvent<
    VoteCastEvent.InputTuple,
    VoteCastEvent.OutputTuple,
    VoteCastEvent.OutputObject
  >;
  getEvent(
    key: "VoterRegistered"
  ): TypedContractEvent<
    VoterRegisteredEvent.InputTuple,
    VoterRegisteredEvent.OutputTuple,
    VoterRegisteredEvent.OutputObject
  >;

  filters: {
    "BallotEnded()": TypedContractEvent<
      BallotEndedEvent.InputTuple,
      BallotEndedEvent.OutputTuple,
      BallotEndedEvent.OutputObject
    >;
    BallotEnded: TypedContractEvent<
      BallotEndedEvent.InputTuple,
      BallotEndedEvent.OutputTuple,
      BallotEndedEvent.OutputObject
    >;

    "BallotStarted()": TypedContractEvent<
      BallotStartedEvent.InputTuple,
      BallotStartedEvent.OutputTuple,
      BallotStartedEvent.OutputObject
    >;
    BallotStarted: TypedContractEvent<
      BallotStartedEvent.InputTuple,
      BallotStartedEvent.OutputTuple,
      BallotStartedEvent.OutputObject
    >;

    "CandidateRegistered(string,string)": TypedContractEvent<
      CandidateRegisteredEvent.InputTuple,
      CandidateRegisteredEvent.OutputTuple,
      CandidateRegisteredEvent.OutputObject
    >;
    CandidateRegistered: TypedContractEvent<
      CandidateRegisteredEvent.InputTuple,
      CandidateRegisteredEvent.OutputTuple,
      CandidateRegisteredEvent.OutputObject
    >;

    "VoteCast(string)": TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;
    VoteCast: TypedContractEvent<
      VoteCastEvent.InputTuple,
      VoteCastEvent.OutputTuple,
      VoteCastEvent.OutputObject
    >;

    "VoterRegistered(string)": TypedContractEvent<
      VoterRegisteredEvent.InputTuple,
      VoterRegisteredEvent.OutputTuple,
      VoterRegisteredEvent.OutputObject
    >;
    VoterRegistered: TypedContractEvent<
      VoterRegisteredEvent.InputTuple,
      VoterRegisteredEvent.OutputTuple,
      VoterRegisteredEvent.OutputObject
    >;
  };
}
